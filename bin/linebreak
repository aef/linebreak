#!/usr/bin/env ruby
# encoding: UTF-8
=begin
Copyright Alexander E. Fischer <aef@raxys.net>, 2009-2012

This file is part of Linebreak.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
=end

require 'rubygems'
require 'aef/linebreak'

# User friendly message if user-choices is not available
begin
  require 'user-choices'
rescue LoadError
  warn "This command needs the user-choices gem to be installed.\n\nSolution: gem install user-choices"; exit false
end

commands_available = {
  :encode => 'Convert all linebreak encodings of a file',
  :encodings => 'Detect linebreak encoding systems of a file',
  :version => 'More information about this program',
  :'--version' => :version,
  :'-v' => :version,
  :'-V' => :version
}

command_name = ARGV.shift
command_name = command_name.to_sym if command_name

if commands_available[command_name].nil?
  puts "Usage: #$PROGRAM_NAME COMMAND"
  puts
  puts 'Available commands:'
  puts
  padding = commands_available.keys.map{|symbol| symbol.to_s}.max{|a,b| a.size <=> b.size}.size
  commands_available.each do |command_name, description|
    unless description.is_a?(Symbol)
      printf "%-#{padding}s\t%s\n", command_name, description
    end
  end
  exit false
else
  if commands_available[command_name].is_a?(Symbol)
    command_name = commands_available[command_name]
  end

  command = Aef::Linebreak.const_get("#{command_name.to_s.capitalize}Command").new
  S4tUtils.with_pleasant_exceptions {command.execute}
end
