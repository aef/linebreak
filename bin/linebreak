#!/usr/bin/env ruby
# 
# Copyright 2009 Alexander E. Fischer <aef@raxys.net>
#
# This file is part of Linebreak.
#
# Linebreak is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'rubygems'

# User friendly message if user-choices is not available
begin
  require 'user-choices'
rescue LoadError
  warn "This command needs the user-choices gem to be installed.\n\nSolution: gem install user-choices"; exit false
end

require 'lib/aef/linebreak/pathname_conversion' rescue LoadError require 'aef/linebreak/pathname_conversion'

commands_available = {
  :encode => 'Convert all linebreak encodings of a file',
  :version => 'More information about this program',
  :'--version' => :version,
  :'-v' => :version,
  :'-V' => :version
}

command_name = ARGV.shift.to_sym

if commands_available[command_name].nil?
  puts "Usage: #$PROGRAM_NAME COMMAND"
  puts
  puts 'Available commands:'
  puts
  padding = commands_available.keys.map{|symbol| symbol.to_s}.max{|a,b| a.size <=> b.size}.size
  commands_available.each do |command_name, description|
    unless description.is_a?(Symbol)
      printf "%-#{padding}s\t%s\n", command_name, description
    end
  end
  exit false
else
  if commands_available[command_name].is_a?(Symbol)
    command_name = commands_available[command_name]
  end

  begin
    require "lib/aef/linebreak/commands/#{command_name}"
  rescue LoadError
    require "aef/linebreak/commands/#{command_name}"
  end

  command = Aef::Linebreak.const_get("#{command_name.to_s.capitalize}Command").new
  S4tUtils.with_pleasant_exceptions {command.execute}
end
